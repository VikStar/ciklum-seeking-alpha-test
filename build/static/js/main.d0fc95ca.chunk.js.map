{"version":3,"sources":["components/Cell/Cell.js","components/Grid/Row.js","components/Grid/Message.js","components/Grid/Grid.js","components/Button/Button.js","utils/utils.js","utils/dummy_data/index.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","isLive","x","y","className","title","Row","size","liveCells","cells","includes","push","Message","props","Grid","coordinates","showMessage","rows","Math","random","Button","children","onClick","isDisabled","disabled","setCoordinate","isValidCoordinate","max","generateRandomCoordinates","gridSize","base","getRandomCoordinate","floor","qty","i","recalculateCoordinates","newCoordinates","deadCellsToCheck","isCellLive","getCoordinate","getSiblings","siblings","filter","cell","Object","keys","forEach","live","dead","length","example_1","25","26","example_2","example_3","24","example_4","INITIAL","start","over","App","useState","state","setState","loadExample","n","dummy","useEffect","timer","setTimeout","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0fc95ca.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.scss';\n\nconst Cell = ({ isLive = false, x, y }) => {\n    return (\n        <div className={`Cell ${isLive ? 'is-live' : ''}`} title={`row ${y + 1}, column ${x + 1}`}></div>\n    );\n};\n\nexport default Cell;","import React from 'react';\nimport Cell from '../Cell/Cell';\nimport './Row.scss';\n\nconst Row = ({ y, size, liveCells}) => {\n    const cells = [];\n\n    for (let x = 0; x < size; x++) {\n        let isLive = false;\n\n        if (liveCells.includes(x)) {\n            isLive = true;\n        }\n        \n        cells.push(<Cell key={x} x={x} y={y} isLive={isLive} />)\n    }\n    \n    return (\n        <div className={`Row`}>\n            {cells}\n        </div>\n    );\n};\n\nexport default Row;","import React from 'react';\nimport './Message.scss';\n\nconst Message = (props) => <div className=\"Message\"><span>GAME OVER</span></div>;\n\nexport default Message;","import React from 'react';\nimport './Grid.scss';\nimport Row from './Row';\nimport Message from './Message';\n\nconst Grid = ({ size, coordinates, showMessage }) => {\n    const rows = [];\n\n    Math.random()\n    \n    for (let y = 0; y < size; y++) {\n        const liveCells = [];\n\n        if (coordinates[y]) {\n            liveCells.push(...coordinates[y]);\n        }\n        \n        rows.push(<Row size={size} key={y} y={y} liveCells={liveCells} />);\n    }\n    \n    return (\n        <div className={`Grid`}>\n            {showMessage ? <Message /> : null}\n            {rows}\n        </div>\n    );\n};\n\nexport default Grid;","import React from 'react';\nimport './Button.scss';\n\nconst Button = ({ children = 'click me', onClick, isDisabled = false }) => {\n    return (\n        <button disabled={isDisabled} className=\"Button\" onClick={onClick}>\n            {children}\n        </button>\n    );\n};\n\nexport default Button;","const setCoordinate = (coordinates, x, y) => {\n    if (coordinates[y]) {\n        if (!coordinates[y].includes(x)) {\n            coordinates[y].push(x);\n        }\n    } else {\n        coordinates[y] = [x];\n    }\n};\n\nconst isValidCoordinate = (x, y, max) => {\n    if (x < 0 || y < 0) return false;\n\n    if (x > max || y > max) return false;\n\n    return true;\n};\n\nexport const generateRandomCoordinates = (gridSize) => {\n    const base = gridSize - 1;\n    const getRandomCoordinate = () => Math.floor(Math.random() * base);\n    const getRandomCoordinates = () => [getRandomCoordinate(), getRandomCoordinate()];\n    // generate random number of live cells\n    // from 200 up to 400\n    const qty = Math.floor(Math.random() * 200 + 200);\n    const coordinates = {};\n    \n    for (let i = 0; i <= qty; i++) {\n        const [x, y] = getRandomCoordinates(base);\n        setCoordinate(coordinates, x, y);\n    }\n\n    return coordinates;\n};\n\nexport const recalculateCoordinates = (coordinates, gridSize) => {\n    const base = gridSize - 1;\n    const newCoordinates = {};\n    const deadCellsToCheck = {};\n\n    const isCellLive = (x, y) => {\n        let isLive = false;\n    \n        if (coordinates[y] && coordinates[y].includes(x)) {\n            isLive = true;\n        }\n    \n        return isLive;\n    };\n\n    const getCoordinate = (x, y) => [x, y, isCellLive(x, y)];\n\n    const getSiblings = (x, y) => {\n        const siblings = [\n            getCoordinate(x - 1, y - 1),\n            getCoordinate(x,     y - 1),\n            getCoordinate(x + 1, y - 1),\n            getCoordinate(x - 1, y),\n            getCoordinate(x + 1, y),\n            getCoordinate(x - 1, y + 1),\n            getCoordinate(x,     y + 1),\n            getCoordinate(x + 1, y + 1)\n        ];\n\n        return [\n            siblings.filter(cell => cell[2]),\n            siblings.filter(cell => !cell[2])\n        ];\n    };\n\n    Object.keys(coordinates).forEach(y => {\n        coordinates[y].forEach(x => {\n            const [live, dead] = getSiblings(+x, +y);\n            const isValid = isValidCoordinate(+x, +y, base);\n            \n            if (isValid) {\n                if (live.length === 2 || live.length === 3) {\n                    setCoordinate(newCoordinates, x, y);\n                }\n            }\n\n            dead.forEach(([x, y]) => {\n                if (isValidCoordinate(x, y, base)) {\n                    setCoordinate(deadCellsToCheck, x, y);\n                }\n            });\n        });\n    });\n\n    Object.keys(deadCellsToCheck).forEach(y => {\n        deadCellsToCheck[y].forEach(x => {\n            const [live] = getSiblings(+x, +y);\n            const isValid = isValidCoordinate(+x, +y, base);\n            \n            if (isValid && live.length === 3) {\n                setCoordinate(newCoordinates, x, y);\n            }\n        });\n    });\n\n    return newCoordinates;\n};","// schema\n// {\n//     y: [x, x, x ...]\n// }\n\nexport const example_1 = {\n    25: [25, 26],\n    26: [25, 26]\n};\n\nexport const example_2 = {\n    25: [25, 26, 27]\n};\n\nexport const example_3 = {\n    24: [25],\n    25: [26],\n    26: [24, 25, 26]\n};\n\nexport const example_4 = {\n    25: [25, 26, 27],\n    26: [24, 25, 26]\n};","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Grid from './components/Grid/Grid';\nimport Button from './components/Button/Button';\nimport { generateRandomCoordinates, recalculateCoordinates } from './utils/utils';\nimport * as dummy from './utils/dummy_data';\n\nconst GRID_SIZE = 50;\nconst TICK = 500; // ms\n\nconst INITIAL = {\n  start: false,\n  over: false,\n  coordinates: {}\n};\n\nconst App = () => {\n  const [state, setState] = useState(INITIAL);\n  const loadExample = (n) => { setState({ ...state, coordinates: dummy[`example_${n}`] }) };\n  \n  useEffect(() => {    \n    let timer;\n    \n    if (state.start) {\n      if (Object.keys(state.coordinates).length === 0) {\n        setState({ ...state, start: false, over: true })\n      } else {\n        timer = setTimeout(() => {\n          setState(state => ({\n            ...state,\n            coordinates: recalculateCoordinates(state.coordinates, GRID_SIZE)\n          }));  \n        }, TICK);\n      }\n    }\n\n    return () => clearTimeout(timer);\n  }, [state]);\n\n  const startStopRestart = () => {\n    if (state.over) return <Button onClick={() => { setState({ ...state, over: false }) }}>Restart</Button>;\n    if (state.start) return <Button onClick={() => { setState({ ...state, start: false }) }}>Stop</Button>;\n\n    return <Button\n      onClick={() => { setState({ ...state, start: true }) }}\n      isDisabled={!Object.keys(state.coordinates).length}>\n      Start\n    </Button>;\n  };\n  \n  return (\n    <div className=\"App\">\n      <Grid size={GRID_SIZE} coordinates={state.coordinates} showMessage={state.over} />\n      \n      <div className=\"controls\">\n        {startStopRestart()}\n\n        <Button\n          isDisabled={state.start || state.over}\n          onClick={() => { setState(state => ({ ...state, coordinates: generateRandomCoordinates(GRID_SIZE) })); }}>\n          Generate randomly\n        </Button>\n\n        <Button isDisabled={state.start || state.over} onClick={() => { loadExample(1); }}>Load example #1</Button>\n        <Button isDisabled={state.start || state.over} onClick={() => { loadExample(2); }}>Load example #2</Button>\n        <Button isDisabled={state.start || state.over} onClick={() => { loadExample(3); }}>Load example #3</Button>\n        <Button isDisabled={state.start || state.over} onClick={() => { loadExample(4); }}>Load example #4</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}